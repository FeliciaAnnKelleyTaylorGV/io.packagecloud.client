#diff --git a/pom.xml b/pom.xml
index 6a7717f..29a5e37 100644
--- a/pom.xml
+++ b/pom.xml
@@ -3,7 +3,7 @@
 
   <groupId>io.packagecloud</groupId>
   <artifactId>client</artifactId>
-  <version>1.0.8-SNAPSHOT</version>
+  <version>1.0.9-SNAPSHOT</version>
   <packaging>jar</packaging>
 
   <name>${project.groupId}:${project.artifactId}</name>
diff --git a/src/main/java/io/packagecloud/client/Client.java b/src/main/java/io/packagecloud/client/Client.java
index f084563..ec02174 100644
--- a/src/main/java/io/packagecloud/client/Client.java
+++ b/src/main/java/io/packagecloud/client/Client.java
@@ -133,10 +133,21 @@ public Result packageContents(InputStream fileStream, String filename, String re
     }
 
 
+    public Result putPackage(
+            InputStream fileStream,
+            String filename,
+            String repository,
+            Integer distroVersionId,
+            Map<String, InputStream> sourceFiles)
+            throws UnauthorizedException, IOException, ServerErrorException {
+        return putPackage(fileStream, filename, getUsername(), repository, distroVersionId, sourceFiles);
+    }
+
     @Override
     public Result putPackage(
             InputStream fileStream,
             String filename,
+            String username,
             String repository,
             Integer distroVersionId,
             Map<String, InputStream> sourceFiles)
@@ -144,7 +155,7 @@ public Result putPackage(
         String strResponse;
         StatusLine statusLine;
 
-        String url = String.format("/api/v1/repos/%s/%s/packages.json", getUsername(), repository);
+        String url = String.format("/api/v1/repos/%s/%s/packages.json", username, repository);
 
         HttpPost httppost = new HttpPost(url);
 
diff --git a/src/main/java/io/packagecloud/client/PackageCloud.java b/src/main/java/io/packagecloud/client/PackageCloud.java
index 8cc3140..7e1edfb 100644
--- a/src/main/java/io/packagecloud/client/PackageCloud.java
+++ b/src/main/java/io/packagecloud/client/PackageCloud.java
@@ -61,6 +61,28 @@ public boolean putPackage(Package pkg) throws UnauthorizedException, IOException
         return true;
     }
 
+    /**
+     * Put package to a shared repository.
+     *
+     * @param pkg the Package to upload
+     * @param username the username of owner of the shared repository
+     * @return the boolean
+     * @throws io.packagecloud.client.UnauthorizedException
+     * @throws java.io.IOException
+     * @throws io.packagecloud.client.ServerErrorException
+     */
+    public boolean putPackage(Package pkg, String username) throws UnauthorizedException, IOException, ServerErrorException {
+        client.putPackage(
+                pkg.getFilestream(),
+                pkg.getFilename(),
+                username,
+                pkg.getRepository(),
+                pkg.getDistroVersionId(),
+                pkg.getSourceFiles());
+
+        return true;
+    }
+
     /**
      * Package contents.
      *
diff --git a/src/main/java/io/packagecloud/client/interfaces/Client.java b/src/main/java/io/packagecloud/client/interfaces/Client.java
index 5096b1c..3c6a3c1 100644
--- a/src/main/java/io/packagecloud/client/interfaces/Client.java
+++ b/src/main/java/io/packagecloud/client/interfaces/Client.java
@@ -10,6 +10,7 @@ public interface Client {
      *
      * @param fileStream the file stream
      * @param filename the filename
+     * @param username the username
      * @param repository the repository
      * @param distroVersionId the distro version id
      * @param sourceFiles the source files
@@ -19,6 +20,7 @@ public interface Client {
     public io.packagecloud.client.interfaces.Result putPackage(
             InputStream fileStream,
             String filename,
+            String username,
             String repository,
             Integer distroVersionId,
             Map<String, InputStream> sourceFiles) throws Exception;
diff --git a/src/test/java/io/packagecloud/client/PackageCloudTest.java b/src/test/java/io/packagecloud/client/PackageCloudTest.java
index 6318f9f..d6de2aa 100644
--- a/src/test/java/io/packagecloud/client/PackageCloudTest.java
+++ b/src/test/java/io/packagecloud/client/PackageCloudTest.java
@@ -88,6 +88,32 @@ public void testPutPackage() throws Exception {
         assertEquals("application/octet-stream", filePart.getContentType().toString());
     }
 
+    @Test
+    public void testPutPackageToCollabRepo() throws Exception {
+
+        InputStream fileStream = getClass().getResourceAsStream("/libampsharp2.0-cil_2.0.4-1_all.deb");
+        byte[] bytes = IOUtils.toByteArray(fileStream);
+
+        Package pkg = new Package(bytes, "mystuff", 16);
+
+        pcloud.putPackage(pkg, "julio");
+
+        TestHttpContext ctx = TestHttpContext.getInstance();
+
+        // Check distro ID
+        String distroVersionId = ctx.getRequest().getPart("package[distro_version_id]").getContent();
+        assertEquals(distroVersionId, "16");
+
+        // Check uploadedBytes vs our bytes
+        Part filePart = ctx.getRequest().getPart("package[package_file]");
+        byte[] uploadedBytes = IOUtils.toByteArray(filePart.getInputStream());
+        assertArrayEquals(bytes, uploadedBytes);
+
+        assertEquals(ctx.getRequest().getPath().toString(), "/api/v1/repos/julio/mystuff/packages.json");
+        assertNotNull(filePart.getFileName());
+        assertEquals("application/octet-stream", filePart.getContentType().toString());
+    }
+
     @Test
     public void testPutGemPackage() throws Exception {
  Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
